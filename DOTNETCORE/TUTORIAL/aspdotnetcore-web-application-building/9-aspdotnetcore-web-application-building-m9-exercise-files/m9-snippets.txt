Snippets Module 9
-----------------

Demo 2
------

AccountController
-----------------
public class AccountController : Controller
{
	private readonly UserManager<IdentityUser> _userManager;
	private readonly SignInManager<IdentityUser> _signInManager;

	public AccountController(UserManager<IdentityUser> userManager,
		SignInManager<IdentityUser> signInManager)
	{
		_userManager = userManager;
		_signInManager = signInManager;
	}

	public IActionResult Login(string returnUrl)
	{
		return View(new LoginViewModel
		{
			ReturnUrl = returnUrl
		});
	}

	[HttpPost]
	public async Task<IActionResult> Login(LoginViewModel loginViewModel)
	{
		if (!ModelState.IsValid)
			return View(loginViewModel);

		var user = await _userManager.FindByNameAsync(loginViewModel.UserName);

		if (user != null)
		{
			var result = await _signInManager.PasswordSignInAsync(user, loginViewModel.Password, false, false);
			if (result.Succeeded)
			{
				if (string.IsNullOrEmpty(loginViewModel.ReturnUrl))
					return RedirectToAction("Index", "Home");

				return Redirect(loginViewModel.ReturnUrl);
			}
		}

		ModelState.AddModelError("", "Username/password not found");
		return View(loginViewModel);
	}


	public IActionResult Register()
	{
		return View();
	}

	[HttpPost]
	[ValidateAntiForgeryToken]
	public async Task<IActionResult> Register(LoginViewModel loginViewModel)
	{
		if (ModelState.IsValid)
		{
			var user = new IdentityUser() { UserName = loginViewModel.UserName };
			var result = await _userManager.CreateAsync(user, loginViewModel.Password);

			if (result.Succeeded)
			{
				return RedirectToAction("Index", "Home");
			}
		}
		return View(loginViewModel);
	}

	[HttpPost]
	public async Task<IActionResult> Logout()
	{
		await _signInManager.SignOutAsync();
		return RedirectToAction("Index", "Home");
	}
}

LoginViewModel
--------------

public class LoginViewModel
{
	[Required]
	[Display(Name = "User name")]
	public string UserName { get; set; }

	[Required]
	[DataType(DataType.Password)]
	public string Password { get; set; }

	public string ReturnUrl { get; set; }
}
	
	
Login.cshtml
------------

@model LoginViewModel

<h2>Please log in before placing an order.</h2>

<form asp-controller="Account" asp-action="Login" method="post" class="form-horizontal" role="form">
    <h4>Enter your details below</h4>
    <hr />
    <input type="hidden" asp-for="ReturnUrl" />
    <div asp-validation-summary="All" class="text-danger"></div>

    <div class="form-group">
        <label asp-for="UserName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="UserName" class="form-control" />
            <span asp-validation-for="UserName" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group">
        <label asp-for="Password" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="Password" class="form-control" />
            <span asp-validation-for="Password" class="text-danger"></span>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-primary" value="Log in" />
        </div>
    </div>

</form>

Register.cshtml
---------------


@model LoginViewModel

<h2>Register now at Bethany's Pie Shop. It's free!</h2>
<form asp-controller="Account" asp-action="Register" method="post" class="form-horizontal" role="form">
    <h4>Create a new account and order your first pie today!</h4>
    <hr />
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="UserName" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="UserName" class="form-control" />
            <span asp-validation-for="UserName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="Password" class="col-md-2 control-label"></label>
        <div class="col-md-10">
            <input asp-for="Password" class="form-control" />
            <span asp-validation-for="Password" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-primary" value="Register" />
        </div>
    </div>
</form>

LoginPartial.cshtml
-------------------

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore

@inject SignInManager<IdentityUser> SignInManager

@if (SignInManager.IsSignedIn(User))
{
    <form asp-area="" asp-controller="Account" asp-action="Logout" id="logoutForm" 
          method="post" class="navbar-right">
        <ul class="nav navbar-nav navbar-right">
            <li><a href="javascript:document.getElementById('logoutForm').submit()">Log off</a></li>
        </ul>
    </form>
}
else
{
    <ul class="nav navbar-nav navbar-right">
        <li><a id="registerLink" asp-controller="Account" asp-action="Register">Register</a></li>
        <li><a id="loginLink" asp-controller="Account" asp-action="Login">Log in</a></li>
    </ul>
}


